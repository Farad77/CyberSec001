#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
TP Phishing - Simulateur de Client Mail
Serveur Flask pour la sensibilisation au phishing
"""

from flask import Flask, render_template, request, jsonify, redirect, url_for
import json
import os
import webbrowser
from threading import Timer

app = Flask(__name__)

# Configuration
EMAILS_FILE = os.path.join(os.path.dirname(__file__), 'emails', 'phishing_emails.json')
PORT = 5000

def get_vpn_ip():
    """Charge l'IP VPN depuis le fichier IP.txt"""
    try:
        ip_file = os.path.join(os.path.dirname(__file__), '..', 'IP.txt')
        with open(ip_file, 'r', encoding='utf-8') as f:
            return f.read().strip()
    except FileNotFoundError:
        return "10.8.0.3"  # IP par d√©faut

def load_emails():
    """Charge les emails depuis le fichier JSON et remplace l'IP VPN"""
    try:
        with open(EMAILS_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # Remplacer l'IP VPN dans tous les emails
        vpn_ip = get_vpn_ip()
        for email in data.get('emails', []):
            # Remplacer dans le contenu
            if 'content' in email:
                email['content'] = email['content'].replace('10.8.0.3', vpn_ip)
            # Remplacer dans les attachments si pr√©sents
            if 'attachments' in email:
                for attachment in email['attachments']:
                    if 'url' in attachment:
                        attachment['url'] = attachment['url'].replace('10.8.0.3', vpn_ip)
        
        return data
    except FileNotFoundError:
        return {"emails": []}

def save_progress(email_id, user_answers):
    """Sauvegarde les r√©ponses de l'utilisateur"""
    progress_file = os.path.join(os.path.dirname(__file__), 'progress.json')
    try:
        with open(progress_file, 'r', encoding='utf-8') as f:
            progress = json.load(f)
    except FileNotFoundError:
        progress = {}
    
    progress[str(email_id)] = user_answers
    
    with open(progress_file, 'w', encoding='utf-8') as f:
        json.dump(progress, f, indent=2, ensure_ascii=False)

def get_completed_emails():
    """R√©cup√®re la liste des emails pour lesquels un quiz a √©t√© compl√©t√©"""
    progress_file = os.path.join(os.path.dirname(__file__), 'progress.json')
    try:
        with open(progress_file, 'r', encoding='utf-8') as f:
            progress = json.load(f)
        return list(progress.keys())
    except FileNotFoundError:
        return []

@app.route('/')
def index():
    """Page d'accueil - Choix du client mail"""
    return render_template('index.html')

@app.route('/gmail')
def gmail():
    """Interface Gmail"""
    emails_data = load_emails()
    completed_emails = get_completed_emails()
    unread_count = len(emails_data['emails']) - len(completed_emails)
    return render_template('gmail.html', emails=emails_data['emails'], completed_emails=completed_emails, unread_count=unread_count)

@app.route('/outlook')
def outlook():
    """Interface Outlook"""
    emails_data = load_emails()
    completed_emails = get_completed_emails()
    unread_count = len(emails_data['emails']) - len(completed_emails)
    return render_template('outlook.html', emails=emails_data['emails'], completed_emails=completed_emails, unread_count=unread_count)

@app.route('/email/<int:email_id>')
def view_email(email_id):
    """Afficher un email sp√©cifique"""
    emails_data = load_emails()
    client = request.args.get('client', 'gmail')
    
    email = None
    for e in emails_data['emails']:
        if e['id'] == email_id:
            email = e
            break
    
    if not email:
        return "Email non trouv√©", 404
    
    return render_template('email_detail.html', email=email, client=client)

@app.route('/analyze/<int:email_id>')
def analyze_email(email_id):
    """Page d'analyse d'un email"""
    emails_data = load_emails()
    client = request.args.get('client', 'gmail')
    
    email = None
    for e in emails_data['emails']:
        if e['id'] == email_id:
            email = e
            break
    
    if not email:
        return "Email non trouv√©", 404
    
    return render_template('analyze.html', email=email, client=client)

@app.route('/submit_analysis', methods=['POST'])
def submit_analysis():
    """Traiter les r√©ponses d'analyse"""
    data = request.get_json()
    email_id = data.get('email_id')
    answers = data.get('answers', {})
    
    # Sauvegarder les r√©ponses
    save_progress(email_id, answers)
    
    # Charger l'email pour obtenir les bonnes r√©ponses
    emails_data = load_emails()
    email = None
    for e in emails_data['emails']:
        if e['id'] == email_id:
            email = e
            break
    
    if not email:
        return jsonify({'error': 'Email non trouv√©'}), 404
    
    # Calculer le score
    correct_answers = email.get('correct_answers', {})
    score = 0
    total = len(correct_answers)
    
    for question, correct_answer in correct_answers.items():
        if answers.get(question) == correct_answer:
            score += 1
    
    return jsonify({
        'score': score,
        'total': total,
        'percentage': round((score / total) * 100) if total > 0 else 0,
        'correct_answers': correct_answers,
        'user_answers': answers,
        'email_completed': True
    })

@app.route('/results')
def results():
    """Page des r√©sultats globaux"""
    try:
        with open(os.path.join(os.path.dirname(__file__), 'progress.json'), 'r', encoding='utf-8') as f:
            progress = json.load(f)
    except FileNotFoundError:
        progress = {}
    
    return render_template('results.html', progress=progress)

@app.route('/reset_progress', methods=['POST'])
def reset_progress():
    """R√©initialiser tous les progr√®s"""
    try:
        print("Route /reset_progress appel√©e")  # Debug
        progress_file = os.path.join(os.path.dirname(__file__), 'progress.json')
        print(f"Fichier de progression: {progress_file}")  # Debug
        
        # Supprimer le fichier de progression s'il existe
        if os.path.exists(progress_file):
            os.remove(progress_file)
            print("Fichier progress.json supprim√©")  # Debug
        else:
            print("Aucun fichier progress.json trouv√©")  # Debug
        
        return jsonify({
            'success': True,
            'message': 'Tous les progr√®s ont √©t√© r√©initialis√©s avec succ√®s.'
        })
    except Exception as e:
        print(f"Erreur dans reset_progress: {e}")  # Debug
        return jsonify({
            'success': False,
            'message': f'Erreur lors de la r√©initialisation: {str(e)}'
        }), 500

@app.route('/test_reset', methods=['GET'])
def test_reset():
    """Test de la route reset"""
    return jsonify({
        'message': 'Route de reset accessible',
        'methods': ['POST'],
        'endpoint': '/reset_progress'
    })

def open_browser():
    """Ouvre automatiquement le navigateur"""
    webbrowser.open(f'http://localhost:{PORT}')

if __name__ == '__main__':
    # Ouvrir le navigateur apr√®s 1 seconde
    Timer(1, open_browser).start()
    
    print(f"üéØ TP Phishing - Simulateur de Client Mail")
    print(f"üåê Serveur d√©marr√© sur http://localhost:{PORT}")
    print(f"üìß Interface Gmail: http://localhost:{PORT}/gmail")
    print(f"üìß Interface Outlook: http://localhost:{PORT}/outlook")
    print(f"üîç Appuyez sur Ctrl+C pour arr√™ter")
    
    app.run(host='0.0.0.0', port=PORT, debug=True, use_reloader=False)